public class Solution {
    Dictionary<(int row, int col1, int col2), int> dp;
    int[] steps = new int[3] { -1, 0, 1 };

    public int CherryPickup(int[][] grid) {
        dp = new();
        return DFS(grid, 0, 0, grid[0].Length-1);
    }

    private int DFS(int[][] grid, int row, int col1, int col2){
        if(row >= grid.Length
            || col1 < 0 || col1 >= grid[row].Length
            || col2 < 0 || col2 >= grid[row].Length){
                return 0;
            }
        
        if(dp.ContainsKey((row, col1, col2))){
            return dp[(row, col1, col2)];
        }

        dp.Add((row, col1, col2), 0);
        int sum = 0;

        if(col1 == col2){
            sum = grid[row][col1];
        }
        else{
            sum = grid[row][col1] + grid[row][col2];
        }

        foreach(var step1 in steps){
            foreach(var step2 in steps){
                dp[(row, col1, col2)] = Math.Max(dp[(row, col1, col2)], DFS(grid, row+1, col1+step1, col2+step2));
            }
        }

        dp[(row, col1, col2)] += sum;
        return dp[(row, col1, col2)];
    }
}
